name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run type checking
      run: npm run type-check

    - name: Run linting
      run: npm run lint

    - name: Setup test database
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
      run: |
        npm run db:push
        npm run db:seed

    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        NODE_ENV: test
      run: npm run test

    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        NODE_ENV: test
      run: npm run test:integration

    - name: Run E2E tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        NODE_ENV: test
      run: npm run test:e2e

    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: true

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4

    - name: Run security audit
      run: npm audit --audit-level high

    - name: Run dependency check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'dependency-security-watcher'
        path: '.'
        format: 'ALL'

    - name: Upload security scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: reports/dependency-check-report.sarif

  build:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4

    - name: Deploy to staging
      env:
        STAGING_HOST: ${{ secrets.STAGING_HOST }}
        STAGING_USER: ${{ secrets.STAGING_USER }}
        STAGING_KEY: ${{ secrets.STAGING_PRIVATE_KEY }}
      run: |
        echo "$STAGING_KEY" > staging_key
        chmod 600 staging_key
        ssh -i staging_key -o StrictHostKeyChecking=no $STAGING_USER@$STAGING_HOST "
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop
          docker stop dependency-watcher-staging || true
          docker rm dependency-watcher-staging || true
          docker run -d --name dependency-watcher-staging \
            --env-file /opt/staging/.env \
            -p 3000:5000 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop
        "

    - name: Run smoke tests
      env:
        STAGING_URL: ${{ secrets.STAGING_URL }}
      run: npm run test:smoke -- --url=$STAGING_URL

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production
      env:
        PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}
        PRODUCTION_USER: ${{ secrets.PRODUCTION_USER }}
        PRODUCTION_KEY: ${{ secrets.PRODUCTION_PRIVATE_KEY }}
      run: |
        echo "$PRODUCTION_KEY" > production_key
        chmod 600 production_key
        ssh -i production_key -o StrictHostKeyChecking=no $PRODUCTION_USER@$PRODUCTION_HOST "
          # Backup current deployment
          docker tag dependency-watcher:latest dependency-watcher:backup-$(date +%Y%m%d-%H%M%S) || true
          
          # Deploy new version
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
          docker stop dependency-watcher || true
          docker rm dependency-watcher || true
          docker run -d --name dependency-watcher \
            --env-file /opt/production/.env \
            --restart unless-stopped \
            -p 80:5000 \
            -p 443:5000 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
        "

    - name: Run production health check
      env:
        PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
      run: |
        sleep 30
        curl -f $PRODUCTION_URL/health || exit 1

    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release from main branch
          
          Changes in this release:
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false

  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: deploy-production
    environment: production
    
    steps:
    - name: Rollback production deployment
      env:
        PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}
        PRODUCTION_USER: ${{ secrets.PRODUCTION_USER }}
        PRODUCTION_KEY: ${{ secrets.PRODUCTION_PRIVATE_KEY }}
      run: |
        echo "$PRODUCTION_KEY" > production_key
        chmod 600 production_key
        ssh -i production_key -o StrictHostKeyChecking=no $PRODUCTION_USER@$PRODUCTION_HOST "
          # Stop current deployment
          docker stop dependency-watcher || true
          docker rm dependency-watcher || true
          
          # Restore backup
          BACKUP_IMAGE=\$(docker images dependency-watcher --format 'table {{.Repository}}:{{.Tag}}' | grep backup | head -1)
          if [ ! -z \"\$BACKUP_IMAGE\" ]; then
            docker run -d --name dependency-watcher \
              --env-file /opt/production/.env \
              --restart unless-stopped \
              -p 80:5000 \
              -p 443:5000 \
              \$BACKUP_IMAGE
          fi
        "

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: 'Production deployment failed and was rolled back'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}